{"version":3,"sources":["types/dashboard.types.ts","pages/Project/ProjectStyles.ts","pages/Project/Layers/LayersStyles.ts","store/store-hooks.ts","store/dashboard/dashboardSelectors.ts","store/dashboard/dashboardReducer.ts","pages/Project/Layers/Layers.tsx","pages/Project/ProjectToolbar/ProjectToolbarStyles.ts","pages/Project/ProjectToolbar/ProjectToolbar.tsx","pages/Project/Dashboard/DashboardCreatingElement/DashboardCreatingElementStyles.ts","pages/Project/Dashboard/DashboardElement/DashboardElementStyles.ts","pages/Project/Dashboard/DashboardElement/Rectangle/RectangleStyles.ts","pages/Project/Dashboard/DashboardElement/Rectangle/Rectangle.tsx","pages/Project/Dashboard/DashboardElement/Circle/CircleStyles.ts","pages/Project/Dashboard/DashboardElement/Circle/Circle.tsx","pages/Project/Dashboard/DashboardElement/Line/LineStyles.ts","pages/Project/Dashboard/DashboardElement/Line/Line.tsx","pages/Project/Dashboard/DashboardElement/DashboardElement.tsx","pages/Project/Dashboard/DashboardCreatingElement/DashboardCreatingElement.tsx","pages/Project/Dashboard/DashboardStyles.ts","pages/Project/Dashboard/Dashboard.tsx","pages/Project/ItemDetails/ItemDetailsStyles.ts","components/ColorDisplayer/ColorDisplayerStyles.ts","components/ColorDisplayer/ColorDisplayer.tsx","pages/Project/ItemDetails/CreationMode/CreationMode.tsx","pages/Project/ItemDetails/SelectionMode/SelectionModeStyles.ts","pages/Project/ItemDetails/SelectionMode/SelectionMode.tsx","pages/Project/ItemDetails/ItemDetails.tsx","pages/Project/Project.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["DashboardResizeEnum","useStyles","makeStyles","theme","createStyles","root","display","content","flexGrow","padding","spacing","drawer","width","flexShrink","drawerPaper","toolbar","mixins","backgroundColor","palette","background","default","useAppDispatch","useDispatch","useAppSelector","useSelector","selectElements","state","dashboard","elements","selectCreatingElement","creatingElement","selectSelectedElementId","selectedElementId","selectSelectedElement","find","element","id","selectMovingElementId","movingElementId","selectResizingElementId","resizingElementId","selectMode","mode","selectCreateModeElementType","createModeElementType","selectCreateModeDefaults","createModeDefaults","DEFAULT_ELEMENT_NAME","rectangle","circle","line","text","image","basicDefaults","name","x","y","point1","point2","height","initialState","movingElementStartCoords","movingElementMouseStartCoords","resizeMode","resizingElementMouseStartCoords","type","fill","border","color","radius","lineWidth","dashboardSlice","createSlice","reducers","addElement","action","unshift","payload","updateElementPosition","length","elementToMove","splice","from","to","setCreatingElement","setSelectedElement","setCreatingElementDimensions","setMode","setCreateModeElementType","setMovingElement","startCoords","mouseStartCoords","moveElement","found","findIndex","el","startX","startY","mouseX","mouseY","setResizingElement","resizeElement","heightDiff","mouseCoords","widthDiff","top","topRight","right","bottomRight","bottom","bottomLeft","left","topLeft","renameElement","foundIdx","elementId","newName","setElementFields","setCreateModeDefaults","actions","Layers","classes","dispatch","useState","editingElementId","setEditingElementId","textFieldOnBlurHandler","event","target","value","Drawer","className","variant","anchor","paper","Toolbar","Divider","Typography","onDragEnd","result","draggableId","source","index","destination","droppableId","provided","RootRef","rootRef","innerRef","List","map","snapshot","ListItem","button","ref","draggableProps","dragHandleProps","style","isDragging","draggableStyle","onClick","onClickHandler","ListItemIcon","ListItemText","primary","TextField","defaultValue","onBlur","placeholder","appBar","zIndex","menuButton","marginRight","title","ProjectToolbar","memo","React","figureItemAnchor","setFigureItemAnchor","isFigureModalOpen","Boolean","handleFigureMenuClose","handleClickOnCreateMode","AppBar","position","IconButton","currentTarget","Menu","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","fontSize","opacity","selectContainer","main","cursor","selectPoint","selectTopLeftPoint","selectTopRightPoint","selectBottomLeftPoint","selectBottomRightPoint","selectLine","selectTopLine","selectRightLine","selectBottomLine","selectLeftLine","selectSizeTooltip","transform","Rectangle","props","config","borderRadius","Circle","overflow","Line","minHeight","minWidth","stroke","strokeWidth","x1","y1","x2","y2","DashboardElement","isCreating","isSelected","isMoving","isResizing","onElementClickHandler","stopPropagation","onResizeMouseDownHandler","preventDefault","pageX","pageY","onResizeMouseUpHandler","onMouseDown","onMouseUp","undefined","DashboardCreatingElement","elementType","Math","abs","userSelect","canvas","Dashboard","elementsToDisplay","setElementsToDisplay","useEffect","reverse","newWidth","newHeight","newDashboardElement","uuidv4","newDashboardElementRectangle","newDashboardElementCircle","newDashboardElementLine","onMouseMove","draggable","paddingLeft","paddingRight","paddingBottom","buttonContainer","textAlign","label","grey","colorButton","menuList","ColorDisplayer","onColorChange","setAnchorEl","list","onChange","rgb","r","g","b","a","CreationMode","onEditableFieldsChange","property","InputProps","inputProps","min","fullWidth","onInput","renderEditableFields","mainInfo","SelectionMode","selectedElement","ItemDetails","Project","App","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","dashboardReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47ece470.chunk.js","sourcesContent":["export type BasicCoords = { x: number; y: number };\r\n\r\nexport interface IDashboardElement {\r\n  id: string;\r\n  name: string;\r\n  type: DashboardCreateModeElementType | null;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  point1: BasicCoords;\r\n  point2: BasicCoords;\r\n}\r\n\r\nexport interface IDashboardElementRectangle extends IDashboardElement {\r\n  fill: string;\r\n  border: {\r\n    width: number;\r\n    color: string;\r\n    radius: number;\r\n  };\r\n}\r\n\r\nexport interface IDashboardElementCircle extends IDashboardElement {\r\n  fill: string;\r\n  border: {\r\n    width: number;\r\n    color: string;\r\n  };\r\n}\r\n\r\nexport interface IDashboardElementLine extends IDashboardElement {\r\n  fill: string;\r\n  lineWidth: number;\r\n}\r\n\r\nexport type AnyDashboardElement =\r\n  | IDashboardElement\r\n  | IDashboardElementRectangle\r\n  | IDashboardElementLine\r\n  | IDashboardElementCircle;\r\n\r\nexport interface IDashboardCreatingElement {\r\n  point1: BasicCoords;\r\n  point2: BasicCoords;\r\n}\r\n\r\nexport const DEFAULT_ELEMENT_NAME = {\r\n  rectangle: 'Rectangle',\r\n  circle: 'Circle',\r\n  line: 'Line',\r\n  text: 'Text',\r\n  image: 'Image',\r\n};\r\n\r\nexport type DashboardModeType = 'select' | 'create' | 'move';\r\n\r\nexport type DashboardCreateModeElementType =\r\n  | 'rectangle'\r\n  | 'circle'\r\n  | 'line'\r\n  | 'text'\r\n  | 'image';\r\n\r\nexport enum DashboardResizeEnum {\r\n  top,\r\n  topRight,\r\n  right,\r\n  bottomRight,\r\n  bottom,\r\n  bottomLeft,\r\n  left,\r\n  topLeft,\r\n}\r\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  }),\r\n);\r\n\r\nexport default useStyles;","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nexport const drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    content: {\r\n      flexGrow: 1,\r\n      backgroundColor: theme.palette.background.default,\r\n      padding: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { RootState } from '../store';\r\n\r\nexport const selectElements = (state: RootState) => state.dashboard.elements;\r\n\r\nexport const selectCreatingElement = (state: RootState) =>\r\n  state.dashboard.creatingElement;\r\n\r\nexport const selectSelectedElementId = (state: RootState) =>\r\n  state.dashboard.selectedElementId;\r\n\r\nexport const selectSelectedElement = (state: RootState) => {\r\n  return state.dashboard.elements.find(\r\n    (element) => element.id === state.dashboard?.selectedElementId\r\n  );\r\n};\r\n\r\nexport const selectMovingElementId = (state: RootState) =>\r\n  state.dashboard.movingElementId;\r\n\r\nexport const selectMovingElement = (state: RootState) => {\r\n  return state.dashboard.elements.find(\r\n    (element) => element.id === state.dashboard?.movingElementId\r\n  );\r\n};\r\n\r\nexport const selectMovingElementMouseStartCoords = (state: RootState) =>\r\n  state.dashboard.movingElementMouseStartCoords;\r\n\r\nexport const selectResizingElementId = (state: RootState) =>\r\n  state.dashboard.resizingElementId;\r\n\r\nexport const selectResizingElement = (state: RootState) => {\r\n  return state.dashboard.elements.find(\r\n    (element) => element.id === state.dashboard?.resizingElementId\r\n  );\r\n};\r\n\r\nexport const selectResizingElementMouseStartCoords = (state: RootState) =>\r\n  state.dashboard.resizingElementMouseStartCoords;\r\n\r\nexport const selectMode = (state: RootState) => state.dashboard.mode;\r\n\r\nexport const selectCreateModeElementType = (state: RootState) =>\r\n  state.dashboard.createModeElementType;\r\n\r\nexport const selectCreateModeDefaults = (state: RootState) =>\r\n  state.dashboard.createModeDefaults;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  DashboardCreateModeElementType,\r\n  DashboardModeType,\r\n  AnyDashboardElement,\r\n  IDashboardCreatingElement,\r\n  BasicCoords,\r\n  DashboardResizeEnum,\r\n  IDashboardElementRectangle,\r\n  IDashboardElementCircle,\r\n  IDashboardElementLine,\r\n} from '../../types/dashboard.types';\r\n\r\ninterface DashboardState {\r\n  elements: AnyDashboardElement[];\r\n  creatingElement: IDashboardCreatingElement | null;\r\n  selectedElementId: string | null;\r\n  movingElementId: string | null;\r\n  movingElementStartCoords: BasicCoords | null;\r\n  movingElementMouseStartCoords: BasicCoords | null;\r\n  resizingElementId: string | null;\r\n  resizeMode: DashboardResizeEnum | null;\r\n  resizingElementMouseStartCoords: BasicCoords | null;\r\n  mode: DashboardModeType;\r\n  createModeElementType: DashboardCreateModeElementType | null;\r\n  createModeDefaults: {\r\n    rectangle: IDashboardElementRectangle;\r\n    circle: IDashboardElementCircle;\r\n    line: IDashboardElementLine;\r\n  };\r\n}\r\n\r\nconst basicDefaults = {\r\n  id: '',\r\n  name: '',\r\n  x: 0,\r\n  y: 0,\r\n  point1: { x: 0, y: 0 },\r\n  point2: { x: 0, y: 0 },\r\n  height: 100,\r\n  width: 100,\r\n};\r\n\r\nconst initialState: DashboardState = {\r\n  elements: [],\r\n  creatingElement: null,\r\n  selectedElementId: null,\r\n  movingElementId: null,\r\n  movingElementStartCoords: null,\r\n  movingElementMouseStartCoords: null,\r\n  resizingElementId: null,\r\n  resizeMode: null,\r\n  resizingElementMouseStartCoords: null,\r\n  mode: 'select' as DashboardModeType,\r\n  createModeElementType: null as DashboardCreateModeElementType | null,\r\n  createModeDefaults: {\r\n    rectangle: {\r\n      ...basicDefaults,\r\n      type: 'rectangle',\r\n      fill: '#FFFFFF',\r\n      border: {\r\n        color: '#000000',\r\n        width: 1,\r\n        radius: 0,\r\n      },\r\n    },\r\n    circle: {\r\n      ...basicDefaults,\r\n      type: 'circle',\r\n      fill: '#FFFFFF',\r\n      border: {\r\n        width: 1,\r\n        color: '#000000',\r\n      },\r\n    },\r\n    line: {\r\n      ...basicDefaults,\r\n      type: 'line',\r\n      fill: '#000000',\r\n      lineWidth: 1,\r\n    },\r\n  },\r\n};\r\n\r\nexport const dashboardSlice = createSlice({\r\n  name: 'dashboard',\r\n  initialState,\r\n  reducers: {\r\n    addElement: (state, action: PayloadAction<AnyDashboardElement>) => {\r\n      state.elements.unshift(action.payload);\r\n      state.creatingElement = null;\r\n    },\r\n\r\n    updateElementPosition: (\r\n      state,\r\n      action: PayloadAction<{ id: string; from: number; to: number }>\r\n    ) => {\r\n      if (state.elements.length) {\r\n        const elementToMove = state.elements.find(\r\n          (element) => element.id === action.payload.id\r\n        );\r\n        if (elementToMove) {\r\n          state.elements.splice(action.payload.from, 1);\r\n          state.elements.splice(action.payload.to, 0, elementToMove);\r\n        }\r\n      }\r\n    },\r\n\r\n    setCreatingElement: (\r\n      state,\r\n      action: PayloadAction<IDashboardCreatingElement | null>\r\n    ) => {\r\n      state.creatingElement = action.payload;\r\n    },\r\n\r\n    setSelectedElement: (\r\n      state,\r\n      action: PayloadAction<AnyDashboardElement | null>\r\n    ) => {\r\n      if (action.payload) {\r\n        state.selectedElementId = action.payload.id;\r\n      } else {\r\n        state.selectedElementId = null;\r\n        state.movingElementId = null;\r\n        state.resizingElementId = null;\r\n      }\r\n    },\r\n\r\n    setCreatingElementDimensions: (\r\n      state,\r\n      action: PayloadAction<{ point2: BasicCoords }>\r\n    ) => {\r\n      if (state.creatingElement) {\r\n        state.creatingElement.point2 = action.payload.point2;\r\n      }\r\n    },\r\n\r\n    setMode: (state, action: PayloadAction<DashboardModeType>) => {\r\n      state.mode = action.payload;\r\n      if (action.payload !== 'create') {\r\n        state.createModeElementType = null;\r\n        state.creatingElement = null;\r\n      }\r\n      if (action.payload !== 'select') {\r\n        state.selectedElementId = null;\r\n        state.movingElementId = null;\r\n        state.resizingElementId = null;\r\n      }\r\n    },\r\n\r\n    setCreateModeElementType: (\r\n      state,\r\n      action: PayloadAction<DashboardCreateModeElementType>\r\n    ) => {\r\n      state.createModeElementType = action.payload;\r\n    },\r\n\r\n    setMovingElement: (\r\n      state,\r\n      action: PayloadAction<{\r\n        startCoords: BasicCoords;\r\n        mouseStartCoords: BasicCoords;\r\n        element: AnyDashboardElement;\r\n      } | null>\r\n    ) => {\r\n      state.movingElementId = action.payload ? action.payload.element.id : null;\r\n      state.movingElementStartCoords = action.payload\r\n        ? action.payload.startCoords\r\n        : null;\r\n      state.movingElementMouseStartCoords = action.payload\r\n        ? action.payload.mouseStartCoords\r\n        : null;\r\n    },\r\n\r\n    moveElement: (state, action: PayloadAction<BasicCoords>) => {\r\n      if (\r\n        state.movingElementId &&\r\n        state.movingElementMouseStartCoords &&\r\n        state.movingElementStartCoords\r\n      ) {\r\n        const id = state.movingElementId;\r\n\r\n        const found = state.elements.findIndex((el) => el.id === id);\r\n        if (found >= 0) {\r\n          const startX = state.movingElementStartCoords.x;\r\n          const startY = state.movingElementStartCoords.y;\r\n          const mouseX = state.movingElementMouseStartCoords.x;\r\n          const mouseY = state.movingElementMouseStartCoords.y;\r\n\r\n          state.elements[found].x = action.payload.x + startX - mouseX;\r\n          state.elements[found].y = action.payload.y + startY - mouseY;\r\n        }\r\n      }\r\n    },\r\n\r\n    setResizingElement: (\r\n      state,\r\n      action: PayloadAction<{\r\n        mouseStartCoords: BasicCoords;\r\n        element: AnyDashboardElement;\r\n        mode: DashboardResizeEnum;\r\n      } | null>\r\n    ) => {\r\n      state.resizingElementId = action.payload\r\n        ? action.payload.element.id\r\n        : null;\r\n      state.resizingElementMouseStartCoords = action.payload\r\n        ? action.payload.mouseStartCoords\r\n        : null;\r\n      state.resizeMode = action.payload ? action.payload.mode : null;\r\n    },\r\n\r\n    resizeElement: (\r\n      state,\r\n      action: PayloadAction<{\r\n        mouseCoords: BasicCoords;\r\n      }>\r\n    ) => {\r\n      if (state.resizingElementId && state.resizingElementMouseStartCoords) {\r\n        const id = state.resizingElementId;\r\n\r\n        const found = state.elements.findIndex((el) => el.id === id);\r\n\r\n        if (found >= 0) {\r\n          const heightDiff =\r\n            state.elements[found].height -\r\n            (action.payload.mouseCoords.y - state.elements[found].y);\r\n          const widthDiff =\r\n            state.elements[found].width -\r\n            (action.payload.mouseCoords.x - state.elements[found].x);\r\n\r\n          switch (state.resizeMode) {\r\n            case DashboardResizeEnum.top:\r\n              if (heightDiff > 0) {\r\n                state.elements[found].height = heightDiff;\r\n                state.elements[found].y = action.payload.mouseCoords.y;\r\n              }\r\n              break;\r\n\r\n            case DashboardResizeEnum.topRight:\r\n              if (heightDiff > 0) {\r\n                state.elements[found].height = heightDiff;\r\n                state.elements[found].y = action.payload.mouseCoords.y;\r\n              }\r\n\r\n              state.elements[found].width =\r\n                action.payload.mouseCoords.x - state.elements[found].x;\r\n              break;\r\n\r\n            case DashboardResizeEnum.right:\r\n              state.elements[found].width =\r\n                action.payload.mouseCoords.x - state.elements[found].x;\r\n              break;\r\n\r\n            case DashboardResizeEnum.bottomRight:\r\n              state.elements[found].height =\r\n                action.payload.mouseCoords.y - state.elements[found].y;\r\n\r\n              state.elements[found].width =\r\n                action.payload.mouseCoords.x - state.elements[found].x;\r\n              break;\r\n\r\n            case DashboardResizeEnum.bottom:\r\n              state.elements[found].height =\r\n                action.payload.mouseCoords.y - state.elements[found].y;\r\n              break;\r\n\r\n            case DashboardResizeEnum.bottomLeft:\r\n              state.elements[found].height =\r\n                action.payload.mouseCoords.y - state.elements[found].y;\r\n\r\n              if (widthDiff > 0) {\r\n                state.elements[found].width = widthDiff;\r\n                state.elements[found].x = action.payload.mouseCoords.x;\r\n              }\r\n              break;\r\n\r\n            case DashboardResizeEnum.left:\r\n              if (widthDiff > 0) {\r\n                state.elements[found].width = widthDiff;\r\n                state.elements[found].x = action.payload.mouseCoords.x;\r\n              }\r\n              break;\r\n\r\n            case DashboardResizeEnum.topLeft:\r\n              if (heightDiff > 0) {\r\n                state.elements[found].height = heightDiff;\r\n                state.elements[found].y = action.payload.mouseCoords.y;\r\n              }\r\n              if (widthDiff > 0) {\r\n                state.elements[found].width = widthDiff;\r\n                state.elements[found].x = action.payload.mouseCoords.x;\r\n              }\r\n              break;\r\n          }\r\n\r\n          if (state.elements[found].height < 1) {\r\n            state.elements[found].height = 1;\r\n          }\r\n\r\n          if (state.elements[found].width < 1) {\r\n            state.elements[found].width = 1;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    renameElement: (\r\n      state,\r\n      action: PayloadAction<{\r\n        newName: string;\r\n        elementId: string;\r\n      }>\r\n    ) => {\r\n      const foundIdx = state.elements.findIndex(\r\n        (element) => element.id === action.payload.elementId\r\n      );\r\n      if (foundIdx >= 0) {\r\n        state.elements[foundIdx].name = action.payload.newName;\r\n      }\r\n    },\r\n\r\n    setElementFields: (\r\n      state,\r\n      action: PayloadAction<{\r\n        elementId: string;\r\n        rectangle?: IDashboardElementRectangle;\r\n        circle?: IDashboardElementCircle;\r\n        line?: IDashboardElementLine;\r\n      }>\r\n    ) => {\r\n      const foundIdx = state.elements.findIndex(\r\n        (element) => element.id === action.payload.elementId\r\n      );\r\n      if (foundIdx >= 0) {\r\n        switch (state.elements[foundIdx].type) {\r\n          case 'rectangle':\r\n            if (action.payload.rectangle) {\r\n              state.elements[foundIdx] = {\r\n                ...(state.elements[foundIdx] as IDashboardElementRectangle),\r\n                fill: action.payload.rectangle.fill,\r\n                border: {\r\n                  color: action.payload.rectangle.border.color,\r\n                  width:\r\n                    action.payload.rectangle.border.width >= 0\r\n                      ? action.payload.rectangle.border.width\r\n                      : 0,\r\n                  radius:\r\n                    action.payload.rectangle.border.radius >= 0\r\n                      ? action.payload.rectangle.border.radius\r\n                      : 0,\r\n                },\r\n              };\r\n            }\r\n            break;\r\n          case 'circle':\r\n            if (action.payload.circle) {\r\n              state.elements[foundIdx] = {\r\n                ...(state.elements[foundIdx] as IDashboardElementCircle),\r\n                fill: action.payload.circle.fill,\r\n                border: {\r\n                  color: action.payload.circle.border.color,\r\n                  width:\r\n                    action.payload.circle.border.width >= 0\r\n                      ? action.payload.circle.border.width\r\n                      : 0,\r\n                },\r\n              };\r\n            }\r\n            break;\r\n          case 'line':\r\n            if (action.payload.line) {\r\n              state.elements[foundIdx] = {\r\n                ...(state.elements[foundIdx] as IDashboardElementLine),\r\n                fill: action.payload.line.fill,\r\n                lineWidth:\r\n                  action.payload.line.lineWidth >= 1\r\n                    ? action.payload.line.lineWidth\r\n                    : 1,\r\n              };\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    },\r\n\r\n    setCreateModeDefaults: (\r\n      state,\r\n      action: PayloadAction<{\r\n        rectangle?: IDashboardElementRectangle;\r\n        circle?: IDashboardElementCircle;\r\n        line?: IDashboardElementLine;\r\n      }>\r\n    ) => {\r\n      if (action.payload.rectangle) {\r\n        state.createModeDefaults.rectangle.fill = action.payload.rectangle.fill;\r\n        state.createModeDefaults.rectangle.border.color =\r\n          action.payload.rectangle.border.color;\r\n        state.createModeDefaults.rectangle.border.width =\r\n          action.payload.rectangle.border.width >= 0\r\n            ? action.payload.rectangle.border.width\r\n            : 0;\r\n        state.createModeDefaults.rectangle.border.radius =\r\n          action.payload.rectangle.border.radius >= 0\r\n            ? action.payload.rectangle.border.radius\r\n            : 0;\r\n      }\r\n      if (action.payload.circle) {\r\n        state.createModeDefaults.circle.fill = action.payload.circle.fill;\r\n        state.createModeDefaults.circle.border.color =\r\n          action.payload.circle.border.color;\r\n        state.createModeDefaults.circle.border.width =\r\n          action.payload.circle.width >= 0 ? action.payload.circle.width : 0;\r\n      }\r\n      if (action.payload.line) {\r\n        state.createModeDefaults.line.fill = action.payload.line.fill;\r\n        state.createModeDefaults.line.lineWidth =\r\n          action.payload.line.lineWidth >= 1\r\n            ? action.payload.line.lineWidth\r\n            : 1;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addElement,\r\n  updateElementPosition,\r\n  setCreatingElement,\r\n  setSelectedElement,\r\n  setCreatingElementDimensions,\r\n  setMode,\r\n  setCreateModeElementType,\r\n  setMovingElement,\r\n  moveElement,\r\n  setResizingElement,\r\n  resizeElement,\r\n  renameElement,\r\n  setCreateModeDefaults,\r\n  setElementFields,\r\n} = dashboardSlice.actions;\r\n\r\nexport default dashboardSlice.reducer;\r\n","import React, { useState, FocusEvent } from 'react';\r\nimport {\r\n  Divider,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  RootRef,\r\n  TextField,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport {\r\n  DragDropContext,\r\n  Droppable,\r\n  Draggable,\r\n  DraggingStyle,\r\n  NotDraggingStyle,\r\n  DropResult,\r\n} from 'react-beautiful-dnd';\r\n\r\nimport useStyles from './LayersStyles';\r\nimport { useAppDispatch, useAppSelector } from '../../../store/store-hooks';\r\nimport {\r\n  selectElements,\r\n  selectSelectedElementId,\r\n} from '../../../store/dashboard/dashboardSelectors';\r\nimport {\r\n  setSelectedElement,\r\n  updateElementPosition,\r\n  renameElement,\r\n} from '../../../store/dashboard/dashboardReducer';\r\nimport { AnyDashboardElement } from '../../../types/dashboard.types';\r\n\r\nconst Layers = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n  const elements = useAppSelector(selectElements);\r\n  const selectedElementId = useAppSelector(selectSelectedElementId);\r\n  const [editingElementId, setEditingElementId] = useState<string | null>(null);\r\n\r\n  const getItemStyle = (\r\n    isDragging: boolean,\r\n    draggableStyle: DraggingStyle | NotDraggingStyle | undefined\r\n  ) => ({\r\n    ...draggableStyle,\r\n    ...(isDragging && {\r\n      background: 'rgb(235,235,235)',\r\n    }),\r\n  });\r\n\r\n  const onDragEndHandler = (result: DropResult) => {\r\n    dispatch(\r\n      updateElementPosition({\r\n        id: result.draggableId,\r\n        from: result.source.index,\r\n        to: result.destination ? result.destination.index : result.source.index,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onClickHandler = (element: AnyDashboardElement) => {\r\n    /** We need to select item, but if it was already selected - then we should edit it */\r\n    if (element.id === selectedElementId) {\r\n      setEditingElementId(element.id);\r\n    } else if (element.id !== editingElementId) {\r\n      dispatch(setSelectedElement(element));\r\n    }\r\n  };\r\n\r\n  const textFieldOnBlurHandler = (event: FocusEvent<HTMLInputElement>) => {\r\n    if (editingElementId) {\r\n      dispatch(\r\n        renameElement({\r\n          elementId: editingElementId,\r\n          newName: event.target.value,\r\n        })\r\n      );\r\n      setEditingElementId(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      className={classes.drawer}\r\n      variant='permanent'\r\n      anchor='left'\r\n      classes={{\r\n        paper: classes.drawerPaper,\r\n      }}\r\n    >\r\n      <Toolbar />\r\n      <Divider />\r\n      <br />\r\n      <Typography variant='h5'>Layers</Typography>\r\n      <DragDropContext onDragEnd={onDragEndHandler}>\r\n        <Droppable droppableId='droppable'>\r\n          {(provided) => (\r\n            <RootRef rootRef={provided.innerRef}>\r\n              <List>\r\n                {elements.map((element, index) => (\r\n                  <Draggable\r\n                    key={element.id}\r\n                    draggableId={element.id}\r\n                    index={index}\r\n                  >\r\n                    {(provided, snapshot) => (\r\n                      <ListItem\r\n                        button\r\n                        key={element.id}\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                        onClick={() => onClickHandler(element)}\r\n                      >\r\n                        {editingElementId !== element.id && (\r\n                          <>\r\n                            <ListItemIcon>\r\n                              <LayersIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={element.name} />\r\n                          </>\r\n                        )}\r\n                        {editingElementId === element.id && (\r\n                          <TextField\r\n                            id='standard-basic'\r\n                            defaultValue={element.name}\r\n                            onBlur={textFieldOnBlurHandler}\r\n                          />\r\n                        )}\r\n                      </ListItem>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </List>\r\n            </RootRef>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default Layers;\r\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default useStyles;","import React, { memo } from 'react';\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  ListItemIcon,\r\n  Menu,\r\n  MenuItem,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nimport NearMeIcon from '@material-ui/icons/NearMe';\r\nimport WidgetsIcon from '@material-ui/icons/Widgets';\r\n// import TextFieldsIcon from '@material-ui/icons/TextFields';\r\nimport Crop54Icon from '@material-ui/icons/Crop54';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nimport useStyles from './ProjectToolbarStyles';\r\n\r\nimport { useAppDispatch } from '../../../store/store-hooks';\r\nimport {\r\n  setCreateModeElementType,\r\n  setMode,\r\n} from '../../../store/dashboard/dashboardReducer';\r\nimport { DashboardCreateModeElementType } from '../../../types/dashboard.types';\r\n\r\nconst ProjectToolbar = memo(() => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [figureItemAnchor, setFigureItemAnchor] =\r\n    React.useState<null | HTMLElement>(null);\r\n  const isFigureModalOpen = Boolean(figureItemAnchor);\r\n\r\n  const handleFigureMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n    setFigureItemAnchor(event.currentTarget);\r\n  };\r\n\r\n  const handleFigureMenuClose = () => {\r\n    setFigureItemAnchor(null);\r\n  };\r\n\r\n  const handleClickOnSelectMode = () => {\r\n    dispatch(setMode('select'));\r\n  };\r\n\r\n  const handleClickOnCreateMode = (element: DashboardCreateModeElementType) => {\r\n    dispatch(setMode('create'));\r\n    dispatch(setCreateModeElementType(element));\r\n    handleFigureMenuClose();\r\n  };\r\n\r\n  // const handleClickOnTextMode = () => {\r\n  //   dispatch(setMode('create'));\r\n  //   dispatch(setCreateModeElementType('text'));\r\n  // };\r\n\r\n  return (\r\n    <AppBar position='fixed' className={classes.appBar}>\r\n      <Toolbar>\r\n        <IconButton color='inherit' onClick={handleClickOnSelectMode}>\r\n          <NearMeIcon />\r\n        </IconButton>\r\n\r\n        <IconButton onClick={handleFigureMenuOpen} color='inherit'>\r\n          <WidgetsIcon />\r\n        </IconButton>\r\n        <Menu\r\n          anchorEl={figureItemAnchor}\r\n          anchorOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n          }}\r\n          keepMounted\r\n          transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n          }}\r\n          open={isFigureModalOpen}\r\n          onClose={handleFigureMenuClose}\r\n        >\r\n          <MenuItem onClick={() => handleClickOnCreateMode('rectangle')}>\r\n            <ListItemIcon>\r\n              <Crop54Icon fontSize='small' />\r\n            </ListItemIcon>\r\n            <Typography variant='inherit'>Rectangle</Typography>\r\n          </MenuItem>\r\n          <MenuItem onClick={() => handleClickOnCreateMode('circle')}>\r\n            <ListItemIcon>\r\n              <RadioButtonUncheckedIcon fontSize='small' />\r\n            </ListItemIcon>\r\n            <Typography variant='inherit'>Circle</Typography>\r\n          </MenuItem>\r\n          <MenuItem onClick={() => handleClickOnCreateMode('line')}>\r\n            <ListItemIcon>\r\n              <RemoveIcon fontSize='small' />\r\n            </ListItemIcon>\r\n            <Typography variant='inherit'>Line</Typography>\r\n          </MenuItem>\r\n        </Menu>\r\n\r\n        {/* <IconButton color='inherit' onClick={handleClickOnTextMode}>\r\n          <TextFieldsIcon />\r\n        </IconButton> */}\r\n\r\n        <Typography variant='h6' className={classes.title}>\r\n          Project\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n});\r\n\r\nexport default ProjectToolbar;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      opacity: '0.7'\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'absolute',\r\n    },\r\n    selectContainer: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      border: `1px solid ${theme.palette.primary.main}`,\r\n      zIndex: 4,\r\n      cursor: 'move',\r\n    },\r\n    selectPoint: {\r\n      position: 'absolute',\r\n      backgroundColor: 'white',\r\n      border: `1px solid ${theme.palette.primary.main}`,\r\n      width: '1.4vh',\r\n      height: '1.4vh',\r\n      zIndex: 5,\r\n    },\r\n    selectTopLeftPoint: {\r\n      top: '-0.7vh',\r\n      left: '-0.7vh',\r\n      cursor: 'nw-resize',\r\n    },\r\n    selectTopRightPoint: {\r\n      top: '-0.7vh',\r\n      right: '-0.7vh',\r\n      cursor: 'ne-resize',\r\n    },\r\n    selectBottomLeftPoint: {\r\n      bottom: '-0.7vh',\r\n      left: '-0.7vh',\r\n      cursor: 'sw-resize',\r\n    },\r\n    selectBottomRightPoint: {\r\n      bottom: '-0.7vh',\r\n      right: '-0.7vh',\r\n      cursor: 'se-resize',\r\n    },\r\n    selectLine: {\r\n      position: 'absolute',\r\n      zIndex: 4,\r\n    },\r\n    selectTopLine: {\r\n      width: '100%',\r\n      height: '1.4vh',\r\n      top: '-0.7vh',\r\n      cursor: 'n-resize',\r\n    },\r\n    selectRightLine: {\r\n      height: '100%',\r\n      width: '1.4vh',\r\n      right: '-0.7vh',\r\n      cursor: 'e-resize',\r\n    },\r\n    selectBottomLine: {\r\n      width: '100%',\r\n      height: '1.4vh',\r\n      bottom: '-0.7vh',\r\n      cursor: 's-resize',\r\n    },\r\n    selectLeftLine: {\r\n      height: '100%',\r\n      width: '1.4vh',\r\n      left: '-0.7vh',\r\n      cursor: 'w-resize',\r\n    },\r\n    selectSizeTooltip: {\r\n      position: 'absolute',\r\n      top: '100%',\r\n      left: '50%',\r\n      transform: 'translate(-50%, 0)',\r\n      border: '1px solid lightgrey',\r\n      backgroundColor: 'lightyellow',\r\n      fontSize: '10px',\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      height: '100%',\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import React, { memo } from 'react';\r\n\r\nimport { IDashboardElementRectangle } from '../../../../../types/dashboard.types';\r\nimport useStyles from './RectangleStyles';\r\n\r\nconst Rectangle = memo((props: { config: IDashboardElementRectangle }) => {\r\n  const { config } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={classes.root}\r\n      style={{\r\n        border: `${config.border.width}px solid ${config.border.color}`,\r\n        backgroundColor: config.fill,\r\n        borderRadius: `${config.border.radius}px`\r\n      }}\r\n    ></div>\r\n  );\r\n});\r\n\r\nexport default Rectangle;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      height: '100%',\r\n      borderRadius: '50%'\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import React, { memo } from 'react';\r\n\r\nimport { IDashboardElementCircle } from '../../../../../types/dashboard.types';\r\nimport useStyles from './CircleStyles';\r\n\r\nconst Circle = memo((props: { config: IDashboardElementCircle }) => {\r\n  const { config } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={classes.root}\r\n      style={{\r\n        border: `${config.border.width}px solid ${config.border.color}`,\r\n        backgroundColor: config.fill,\r\n      }}\r\n    ></div>\r\n  );\r\n});\r\n\r\nexport default Circle;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      height: '100%',\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n      overflow: 'visible'\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import React, { memo } from 'react';\r\n\r\nimport { IDashboardElementLine } from '../../../../../types/dashboard.types';\r\nimport useStyles from './LineStyles';\r\n\r\nconst Line = memo((props: { config: IDashboardElementLine }) => {\r\n  const { config } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <svg\r\n      className={classes.root}\r\n      style={{ minHeight: config.lineWidth, minWidth: config.lineWidth }}\r\n    >\r\n      <line\r\n        stroke={config.fill}\r\n        strokeWidth={config.lineWidth}\r\n        x1={config.point1.x <= config.point2.x ? 0 : config.width}\r\n        y1={config.point1.y <= config.point2.y ? 0 : config.height}\r\n        x2={config.point1.x > config.point2.x ? 0 : config.width}\r\n        y2={config.point1.y > config.point2.y ? 0 : config.height}\r\n      ></line>\r\n    </svg>\r\n  );\r\n});\r\n\r\nexport default Line;\r\n","import React, { memo, MouseEvent } from 'react';\r\n\r\nimport useStyles from './DashboardElementStyles';\r\nimport {\r\n  AnyDashboardElement,\r\n  DashboardResizeEnum,\r\n  IDashboardElementCircle,\r\n  IDashboardElementLine,\r\n  IDashboardElementRectangle,\r\n} from '../../../../types/dashboard.types';\r\nimport Rectangle from './Rectangle/Rectangle';\r\nimport Circle from './Circle/Circle';\r\nimport Line from './Line/Line';\r\nimport { useAppDispatch, useAppSelector } from '../../../../store/store-hooks';\r\nimport {\r\n  setMovingElement,\r\n  setResizingElement,\r\n  setSelectedElement,\r\n} from '../../../../store/dashboard/dashboardReducer';\r\nimport {\r\n  selectCreateModeDefaults,\r\n  selectMode,\r\n  selectMovingElementId,\r\n  selectResizingElementId,\r\n  selectSelectedElementId,\r\n} from '../../../../store/dashboard/dashboardSelectors';\r\n\r\nconst DashboardElement = memo((props: {\r\n  config: AnyDashboardElement;\r\n  isCreating?: boolean;\r\n}) => {\r\n  const { config, isCreating } = props;\r\n\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const mode = useAppSelector(selectMode);\r\n  const createModeDefaults = useAppSelector(selectCreateModeDefaults);\r\n  const selectedElementId = useAppSelector(selectSelectedElementId);\r\n  const movingElementId = useAppSelector(selectMovingElementId);\r\n  const resizingElementId = useAppSelector(selectResizingElementId);\r\n\r\n  const isSelected = selectedElementId && selectedElementId === config.id;\r\n  const isMoving = movingElementId && movingElementId === config.id;\r\n  const isResizing = resizingElementId && resizingElementId === config.id;\r\n\r\n  const onElementClickHandler = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n    if (mode === 'select') {\r\n      dispatch(setSelectedElement(config));\r\n    }\r\n  };\r\n\r\n  const onElementMouseDownHandler = (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    if (mode === 'select' && isSelected && !isMoving) {\r\n      dispatch(\r\n        setMovingElement({\r\n          element: config,\r\n          startCoords: { x: config.x, y: config.y },\r\n          mouseStartCoords: { x: event.pageX, y: event.pageY },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const onElementMouseUpHandler = () => {\r\n    if (mode === 'select' && isSelected) {\r\n      if (isMoving) {\r\n        dispatch(setMovingElement(null));\r\n      }\r\n      if (isResizing) {\r\n        dispatch(setResizingElement(null));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onResizeMouseDownHandler = (\r\n    event: MouseEvent,\r\n    resizeMode: DashboardResizeEnum\r\n  ) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (mode === 'select' && isSelected) {\r\n      dispatch(\r\n        setResizingElement({\r\n          element: config,\r\n          mouseStartCoords: { x: event.pageX, y: event.pageY },\r\n          mode: resizeMode,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const onResizeMouseUpHandler = (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    if (mode === 'select' && isSelected) {\r\n      dispatch(setResizingElement(null));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classes.root}\r\n      style={{\r\n        width: config.width,\r\n        height: config.height,\r\n        left: config.x,\r\n        top: config.y,\r\n      }}\r\n      onClick={onElementClickHandler}\r\n      onMouseDown={onElementMouseDownHandler}\r\n      onMouseUp={onElementMouseUpHandler}\r\n    >\r\n      {config.type === 'rectangle' && (\r\n        <Rectangle\r\n          config={{\r\n            ...config,\r\n            fill:\r\n              (config as IDashboardElementRectangle).fill ||\r\n              createModeDefaults.rectangle.fill,\r\n            border: {\r\n              color:\r\n                (config as IDashboardElementRectangle).border?.color ||\r\n                createModeDefaults.rectangle.border.color,\r\n              width:\r\n                (config as IDashboardElementRectangle).border?.width !==\r\n                undefined\r\n                  ? (config as IDashboardElementRectangle).border?.width\r\n                  : createModeDefaults.rectangle.border.width,\r\n              radius:\r\n                (config as IDashboardElementRectangle).border?.radius !==\r\n                undefined\r\n                  ? (config as IDashboardElementRectangle).border?.radius\r\n                  : createModeDefaults.rectangle.border.radius,\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n      {config.type === 'circle' && (\r\n        <Circle\r\n          config={{\r\n            ...config,\r\n            fill:\r\n              (config as IDashboardElementCircle).fill ||\r\n              createModeDefaults.circle.fill,\r\n            border: {\r\n              color:\r\n                (config as IDashboardElementCircle).border?.color ||\r\n                createModeDefaults.circle.border.color,\r\n              width:\r\n                (config as IDashboardElementCircle).border?.width !== undefined\r\n                  ? (config as IDashboardElementCircle).border?.width\r\n                  : createModeDefaults.circle.border.width,\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n      {config.type === 'line' && (\r\n        <Line\r\n          config={{\r\n            ...config,\r\n            fill:\r\n              (config as IDashboardElementLine).fill ||\r\n              createModeDefaults.line.fill,\r\n            lineWidth:\r\n              (config as IDashboardElementLine).lineWidth !== undefined\r\n                ? (config as IDashboardElementLine).lineWidth\r\n                : createModeDefaults.line.lineWidth,\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {isSelected && (\r\n        <div\r\n          className={classes.selectContainer}\r\n          onClick={onElementClickHandler}\r\n        >\r\n          {/* Lines */}\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.top)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={classes.selectLine + ' ' + classes.selectTopLine}\r\n          ></div>\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.right)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={classes.selectLine + ' ' + classes.selectRightLine}\r\n          ></div>\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.bottom)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={classes.selectLine + ' ' + classes.selectBottomLine}\r\n          ></div>\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.left)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={classes.selectLine + ' ' + classes.selectLeftLine}\r\n          ></div>\r\n\r\n          {/* Points */}\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.topLeft)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={classes.selectPoint + ' ' + classes.selectTopLeftPoint}\r\n          ></div>\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.topRight)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={classes.selectPoint + ' ' + classes.selectTopRightPoint}\r\n          ></div>\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.bottomLeft)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={\r\n              classes.selectPoint + ' ' + classes.selectBottomLeftPoint\r\n            }\r\n          ></div>\r\n          <div\r\n            onMouseDown={(event) =>\r\n              onResizeMouseDownHandler(event, DashboardResizeEnum.bottomRight)\r\n            }\r\n            onMouseUp={onResizeMouseUpHandler}\r\n            className={\r\n              classes.selectPoint + ' ' + classes.selectBottomRightPoint\r\n            }\r\n          ></div>\r\n        </div>\r\n      )}\r\n      {/* Text helpers */}\r\n      {(isResizing || isCreating) && (\r\n        <div className={classes.selectSizeTooltip}>\r\n          {config.width + ' x ' + config.height}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default DashboardElement;\r\n","import React from 'react';\r\n\r\nimport useStyles from './DashboardCreatingElementStyles';\r\nimport {\r\n  DEFAULT_ELEMENT_NAME,\r\n  IDashboardCreatingElement,\r\n} from '../../../../types/dashboard.types';\r\nimport DashboardElement from '../DashboardElement/DashboardElement';\r\nimport { useAppSelector } from '../../../../store/store-hooks';\r\nimport { selectCreateModeElementType } from '../../../../store/dashboard/dashboardSelectors';\r\n\r\nconst DashboardCreatingElement = (props: {\r\n  config: IDashboardCreatingElement;\r\n}) => {\r\n  const { config } = props;\r\n  const classes = useStyles();\r\n\r\n  const elementType = useAppSelector(selectCreateModeElementType);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <DashboardElement\r\n        isCreating={true}\r\n        config={{\r\n          id: 'creating-element',\r\n          name: elementType ? DEFAULT_ELEMENT_NAME[elementType] || '' : '',\r\n          type: elementType,\r\n          height: Math.abs(config.point1.y - config.point2.y),\r\n          width: Math.abs(config.point1.x - config.point2.x),\r\n          y:\r\n            config.point1.y >= config.point2.y\r\n              ? config.point2.y\r\n              : config.point1.y,\r\n          x:\r\n            config.point1.x >= config.point2.x\r\n              ? config.point2.x\r\n              : config.point1.x,\r\n          point1: {\r\n            x: config.point1.x,\r\n            y: config.point1.y,\r\n          },\r\n          point2: {\r\n            x: config.point2.x,\r\n            y: config.point2.y,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardCreatingElement;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      userSelect: 'none',\r\n      overflow: 'hidden',\r\n    },\r\n    canvas: {\r\n      position: 'fixed',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      userSelect: 'none',\r\n      overflow: 'hidden',\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import React, { memo, MouseEvent, useEffect, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../../store/store-hooks';\r\nimport {\r\n  addElement,\r\n  moveElement,\r\n  resizeElement,\r\n  setCreatingElement,\r\n  setCreatingElementDimensions,\r\n  setMode,\r\n  setSelectedElement,\r\n} from '../../../store/dashboard/dashboardReducer';\r\nimport {\r\n  selectCreateModeDefaults,\r\n  selectCreateModeElementType,\r\n  selectCreatingElement,\r\n  selectElements,\r\n  selectMode,\r\n  selectMovingElementId,\r\n  selectResizingElementId,\r\n} from '../../../store/dashboard/dashboardSelectors';\r\nimport {\r\n  AnyDashboardElement,\r\n  DEFAULT_ELEMENT_NAME,\r\n  IDashboardElement,\r\n  IDashboardElementCircle,\r\n  IDashboardElementLine,\r\n  IDashboardElementRectangle,\r\n} from '../../../types/dashboard.types';\r\nimport DashboardCreatingElement from './DashboardCreatingElement/DashboardCreatingElement';\r\nimport DashboardElement from './DashboardElement/DashboardElement';\r\nimport useStyles from './DashboardStyles';\r\n\r\nconst Dashboard = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const elements = useAppSelector(selectElements);\r\n  const creatingElement = useAppSelector(selectCreatingElement);\r\n  const movingElementId = useAppSelector(selectMovingElementId);\r\n  const resizingElementId = useAppSelector(selectResizingElementId);\r\n  const mode = useAppSelector(selectMode);\r\n  const createModeDefaults = useAppSelector(selectCreateModeDefaults);\r\n  const elementType = useAppSelector(selectCreateModeElementType);\r\n\r\n  const [elementsToDisplay, setElementsToDisplay] = useState<\r\n    AnyDashboardElement[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    setElementsToDisplay([...elements].reverse());\r\n  }, [elements]);\r\n\r\n  const onMouseDownHandler = (event: MouseEvent) => {\r\n    /** Creating mode  */\r\n    switch (mode) {\r\n      case 'create':\r\n        dispatch(\r\n          setCreatingElement({\r\n            point1: { x: event.pageX, y: event.pageY },\r\n            point2: { x: event.pageX, y: event.pageY },\r\n          })\r\n        );\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onMouseMoveHandler = (event: MouseEvent) => {\r\n    /** Creating mode */\r\n    switch (mode) {\r\n      case 'create':\r\n        if (creatingElement) {\r\n          /** Updating element with/height by event x/y */\r\n          dispatch(\r\n            setCreatingElementDimensions({\r\n              point2: { x: event.pageX, y: event.pageY },\r\n            })\r\n          );\r\n        }\r\n        break;\r\n      case 'select':\r\n        if (movingElementId) {\r\n          dispatch(\r\n            moveElement({\r\n              x: event.pageX,\r\n              y: event.pageY,\r\n            })\r\n          );\r\n        }\r\n        if (resizingElementId) {\r\n          dispatch(\r\n            resizeElement({\r\n              mouseCoords: { x: event.pageX, y: event.pageY },\r\n            })\r\n          );\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onMouseUpHandler = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n\r\n    switch (mode) {\r\n      case 'create':\r\n        if (creatingElement) {\r\n          let newWidth = 0;\r\n          let newHeight = 0;\r\n\r\n          if (\r\n            Math.abs(creatingElement.point1.x - creatingElement.point2.x) <=\r\n              5 &&\r\n            Math.abs(creatingElement.point1.y - creatingElement.point2.y) <= 5\r\n          ) {\r\n            newWidth = 100;\r\n            newHeight = 100;\r\n          } else {\r\n            newWidth = Math.abs(\r\n              creatingElement.point1.x - creatingElement.point2.x\r\n            );\r\n            newHeight = Math.abs(\r\n              creatingElement.point1.y - creatingElement.point2.y\r\n            );\r\n          }\r\n\r\n          const newDashboardElement: IDashboardElement = {\r\n            id: uuidv4(),\r\n            name: elementType ? DEFAULT_ELEMENT_NAME[elementType] || '' : '',\r\n            type: elementType,\r\n            width: newWidth,\r\n            height: newHeight,\r\n            x:\r\n              creatingElement.point1.x <= creatingElement.point2.x\r\n                ? creatingElement.point1.x\r\n                : creatingElement.point2.x,\r\n            y:\r\n              creatingElement.point1.y <= creatingElement.point2.y\r\n                ? creatingElement.point1.y\r\n                : creatingElement.point2.y,\r\n            point1: {\r\n              y: creatingElement.point1.y,\r\n              x: creatingElement.point1.x,\r\n            },\r\n            point2: {\r\n              y: creatingElement.point2.y,\r\n              x: creatingElement.point2.x,\r\n            },\r\n          };\r\n\r\n          switch (newDashboardElement.type) {\r\n            case 'rectangle':\r\n              const newDashboardElementRectangle: IDashboardElementRectangle = {\r\n                ...createModeDefaults.rectangle,\r\n                ...newDashboardElement,\r\n              };\r\n              dispatch(addElement(newDashboardElementRectangle));\r\n              break;\r\n            case 'circle':\r\n              const newDashboardElementCircle: IDashboardElementCircle = {\r\n                ...createModeDefaults.circle,\r\n                ...newDashboardElement,\r\n              };\r\n              dispatch(addElement(newDashboardElementCircle));\r\n              break;\r\n            case 'line':\r\n              const newDashboardElementLine: IDashboardElementLine = {\r\n                ...createModeDefaults.line,\r\n                ...newDashboardElement,\r\n              };\r\n              dispatch(addElement(newDashboardElementLine));\r\n              break;\r\n          }\r\n\r\n          dispatch(setMode('select'));\r\n          dispatch(setSelectedElement(newDashboardElement));\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onEmptySpaceMouseUpHandler = () => {\r\n    if (mode === 'select') {\r\n      dispatch(setSelectedElement(null));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classes.root}\r\n      onMouseDown={onMouseDownHandler}\r\n      onMouseUp={onMouseUpHandler}\r\n      onMouseMove={onMouseMoveHandler}\r\n      draggable='false'\r\n    >\r\n      <div\r\n        className={classes.canvas}\r\n        onMouseUp={onEmptySpaceMouseUpHandler}\r\n      ></div>\r\n      {elementsToDisplay.map((element) => {\r\n        return <DashboardElement key={element.id} config={element} />;\r\n      })}\r\n      {creatingElement && <DashboardCreatingElement config={creatingElement} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nexport const drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    content: {\r\n      paddingLeft: theme.spacing(3),\r\n      paddingRight: theme.spacing(3),\r\n      paddingBottom: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    buttonContainer: {\r\n      textAlign: 'left',\r\n    },\r\n    label: {\r\n      color: theme.palette.grey[600]\r\n    },\r\n    colorButton: {\r\n      width: 30,\r\n      height: 30,\r\n      cursor: 'pointer',\r\n      border: '1px solid lightgray',\r\n    },\r\n    menuList: {\r\n      padding: 0,\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import React, { useState, MouseEvent, memo } from 'react';\r\nimport { Menu, Typography } from '@material-ui/core';\r\nimport { SketchPicker } from 'react-color';\r\n\r\nimport useStyles from './ColorDisplayerStyles';\r\n\r\nconst ColorDisplayer = memo((props: {\r\n  label: string;\r\n  color: string;\r\n  onColorChange: Function;\r\n}) => {\r\n  const { label, color, onColorChange } = props;\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n  const handleClick = (event: MouseEvent<HTMLDivElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.buttonContainer}>\r\n        <Typography variant='caption' className={classes.label}>{label}</Typography>\r\n        <div\r\n          onClick={handleClick}\r\n          className={classes.colorButton}\r\n          style={{ backgroundColor: color }}\r\n        ></div>\r\n      </div>\r\n\r\n      <Menu\r\n        id='simple-menu'\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n        classes={{ list: classes.menuList }}\r\n      >\r\n        <SketchPicker\r\n          color={color}\r\n          onChange={(color) => {\r\n            onColorChange(\r\n              `rgba(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b}, ${\r\n                color.rgb.a || 1\r\n              })`\r\n            );\r\n          }}\r\n        />\r\n      </Menu>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ColorDisplayer;\r\n","import React, { ChangeEvent, memo } from 'react';\r\nimport { TextField, Typography } from '@material-ui/core';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../../../store/store-hooks';\r\nimport {\r\n  selectCreateModeDefaults,\r\n  selectCreateModeElementType,\r\n} from '../../../../store/dashboard/dashboardSelectors';\r\nimport {\r\n  DashboardCreateModeElementType,\r\n  DEFAULT_ELEMENT_NAME,\r\n} from '../../../../types/dashboard.types';\r\nimport { setCreateModeDefaults } from '../../../../store/dashboard/dashboardReducer';\r\nimport ColorDisplayer from '../../../../components/ColorDisplayer/ColorDisplayer';\r\n\r\nconst CreationMode = memo(() => {\r\n  const dispatch = useAppDispatch();\r\n  const createModeElementType = useAppSelector(selectCreateModeElementType);\r\n  const createModeDefaults = useAppSelector(selectCreateModeDefaults);\r\n\r\n  const onEditableFieldsChange = (\r\n    type: DashboardCreateModeElementType,\r\n    property: string,\r\n    value: any\r\n  ) => {\r\n    switch (type) {\r\n      case 'rectangle':\r\n        switch (property) {\r\n          case 'fill':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                rectangle: {\r\n                  ...createModeDefaults.rectangle,\r\n                  fill: value,\r\n                },\r\n              })\r\n            );\r\n            break;\r\n\r\n          case 'borderWidth':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                rectangle: {\r\n                  ...createModeDefaults.rectangle,\r\n                  border: {\r\n                    ...createModeDefaults.rectangle.border,\r\n                    width: +value,\r\n                  },\r\n                },\r\n              })\r\n            );\r\n            break;\r\n\r\n          case 'borderColor':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                rectangle: {\r\n                  ...createModeDefaults.rectangle,\r\n                  border: {\r\n                    ...createModeDefaults.rectangle.border,\r\n                    color: value,\r\n                  },\r\n                },\r\n              })\r\n            );\r\n            break;\r\n\r\n          case 'borderRadius':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                rectangle: {\r\n                  ...createModeDefaults.rectangle,\r\n                  border: {\r\n                    ...createModeDefaults.rectangle.border,\r\n                    radius: +value,\r\n                  },\r\n                },\r\n              })\r\n            );\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case 'circle':\r\n        switch (property) {\r\n          case 'fill':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                circle: {\r\n                  ...createModeDefaults.circle,\r\n                  fill: value,\r\n                },\r\n              })\r\n            );\r\n            break;\r\n\r\n          case 'borderWidth':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                circle: {\r\n                  ...createModeDefaults.circle,\r\n                  border: {\r\n                    ...createModeDefaults.circle.border,\r\n                    width: +value,\r\n                  },\r\n                },\r\n              })\r\n            );\r\n            break;\r\n\r\n          case 'borderColor':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                circle: {\r\n                  ...createModeDefaults.circle,\r\n                  border: {\r\n                    ...createModeDefaults.circle.border,\r\n                    color: value,\r\n                  },\r\n                },\r\n              })\r\n            );\r\n            break;\r\n        }\r\n        break;\r\n\r\n      case 'line':\r\n        switch (property) {\r\n          case 'fill':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                line: {\r\n                  ...createModeDefaults.line,\r\n                  fill: value,\r\n                },\r\n              })\r\n            );\r\n            break;\r\n\r\n          case 'lineWidth':\r\n            dispatch(\r\n              setCreateModeDefaults({\r\n                line: {\r\n                  ...createModeDefaults.line,\r\n                  lineWidth: +value,\r\n                },\r\n              })\r\n            );\r\n            break;\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  const renderEditableFields = () => {\r\n    switch (createModeElementType) {\r\n      case 'rectangle':\r\n        return (\r\n          <>\r\n            <ColorDisplayer\r\n              label={'Fill color'}\r\n              color={createModeDefaults.rectangle.fill}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('rectangle', 'fill', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Border width'\r\n              defaultValue={createModeDefaults.rectangle.border.width}\r\n              InputProps={{ inputProps: { min: 0 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange(\r\n                  'rectangle',\r\n                  'borderWidth',\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n\r\n            <br />\r\n            <br />\r\n\r\n            <ColorDisplayer\r\n              label={'Border color'}\r\n              color={createModeDefaults.rectangle.border.color}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('rectangle', 'borderColor', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Border radius'\r\n              defaultValue={createModeDefaults.rectangle.border.radius}\r\n              InputProps={{ inputProps: { min: 0 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange(\r\n                  'rectangle',\r\n                  'borderRadius',\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n          </>\r\n        );\r\n\r\n      case 'circle':\r\n        return (\r\n          <>\r\n            <ColorDisplayer\r\n              label={'Fill color'}\r\n              color={createModeDefaults.circle.fill}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('circle', 'fill', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Border width'\r\n              defaultValue={createModeDefaults.circle.border.width}\r\n              InputProps={{ inputProps: { min: 0 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange(\r\n                  'circle',\r\n                  'borderWidth',\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n\r\n            <br />\r\n            <br />\r\n\r\n            <ColorDisplayer\r\n              label={'Border color'}\r\n              color={createModeDefaults.circle.border.color}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('circle', 'borderColor', color)\r\n              }\r\n            />\r\n          </>\r\n        );\r\n\r\n      case 'line':\r\n        return (\r\n          <>\r\n            <ColorDisplayer\r\n              label={'Fill color'}\r\n              color={createModeDefaults.line.fill}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('line', 'fill', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Line width'\r\n              defaultValue={createModeDefaults.line.lineWidth}\r\n              InputProps={{ inputProps: { min: 1 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange('line', 'lineWidth', event.target.value)\r\n              }\r\n            />\r\n          </>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  if (createModeElementType) {\r\n    return (\r\n      <div>\r\n        <Typography variant='h5'>Creation mode</Typography>\r\n        <Typography variant='subtitle1'>\r\n          {DEFAULT_ELEMENT_NAME[createModeElementType]}\r\n        </Typography>\r\n        <br />\r\n        {renderEditableFields()}\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n});\r\n\r\nexport default CreationMode;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\n\r\nexport const drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    mainInfo: {\r\n      textAlign: 'left',\r\n    },\r\n  })\r\n);\r\n\r\nexport default useStyles;\r\n","import React, { ChangeEvent, memo } from 'react';\r\nimport { TextField, Typography } from '@material-ui/core';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../../../store/store-hooks';\r\nimport { selectSelectedElement } from '../../../../store/dashboard/dashboardSelectors';\r\nimport { setElementFields } from '../../../../store/dashboard/dashboardReducer';\r\nimport {\r\n  DashboardCreateModeElementType,\r\n  DEFAULT_ELEMENT_NAME,\r\n  IDashboardElementCircle,\r\n  IDashboardElementLine,\r\n  IDashboardElementRectangle,\r\n} from '../../../../types/dashboard.types';\r\nimport useStyles from './SelectionModeStyles';\r\nimport ColorDisplayer from '../../../../components/ColorDisplayer/ColorDisplayer';\r\n\r\nconst SelectionMode = memo(() => {\r\n  const classes = useStyles();\r\n  const dispatch = useAppDispatch();\r\n  const selectedElement = useAppSelector(selectSelectedElement);\r\n\r\n  const onEditableFieldsChange = (\r\n    type: DashboardCreateModeElementType,\r\n    property: string,\r\n    value: any\r\n  ) => {\r\n    if (selectedElement) {\r\n      switch (type) {\r\n        case 'rectangle':\r\n          switch (property) {\r\n            case 'fill':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  rectangle: {\r\n                    ...(selectedElement as IDashboardElementRectangle),\r\n                    fill: value,\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n\r\n            case 'borderWidth':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  rectangle: {\r\n                    ...(selectedElement as IDashboardElementRectangle),\r\n                    border: {\r\n                      ...(selectedElement as IDashboardElementRectangle).border,\r\n                      width: +value,\r\n                    },\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n\r\n            case 'borderColor':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  rectangle: {\r\n                    ...(selectedElement as IDashboardElementRectangle),\r\n                    border: {\r\n                      ...(selectedElement as IDashboardElementRectangle).border,\r\n                      color: value,\r\n                    },\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n\r\n            case 'borderRadius':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  rectangle: {\r\n                    ...(selectedElement as IDashboardElementRectangle),\r\n                    border: {\r\n                      ...(selectedElement as IDashboardElementRectangle).border,\r\n                      radius: +value,\r\n                    },\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n          }\r\n          break;\r\n\r\n        case 'circle':\r\n          switch (property) {\r\n            case 'fill':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  circle: {\r\n                    ...(selectedElement as IDashboardElementCircle),\r\n                    fill: value,\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n\r\n            case 'borderWidth':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  circle: {\r\n                    ...(selectedElement as IDashboardElementCircle),\r\n                    border: {\r\n                      ...(selectedElement as IDashboardElementCircle).border,\r\n                      width: +value,\r\n                    },\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n\r\n            case 'borderColor':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  circle: {\r\n                    ...(selectedElement as IDashboardElementCircle),\r\n                    border: {\r\n                      ...(selectedElement as IDashboardElementCircle).border,\r\n                      color: value,\r\n                    },\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n          }\r\n          break;\r\n\r\n        case 'line':\r\n          switch (property) {\r\n            case 'fill':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  line: {\r\n                    ...(selectedElement as IDashboardElementLine),\r\n                    fill: value,\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n\r\n            case 'lineWidth':\r\n              dispatch(\r\n                setElementFields({\r\n                  elementId: selectedElement.id,\r\n                  line: {\r\n                    ...(selectedElement as IDashboardElementLine),\r\n                    lineWidth: +value,\r\n                  },\r\n                })\r\n              );\r\n              break;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderEditableFields = () => {\r\n    switch (selectedElement?.type) {\r\n      case 'rectangle':\r\n        return (\r\n          <>\r\n            <ColorDisplayer\r\n              label={'Fill color'}\r\n              color={(selectedElement as IDashboardElementRectangle).fill}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('rectangle', 'fill', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Border width'\r\n              defaultValue={\r\n                (selectedElement as IDashboardElementRectangle).border.width\r\n              }\r\n              InputProps={{ inputProps: { min: 0 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange(\r\n                  'rectangle',\r\n                  'borderWidth',\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n\r\n            <br />\r\n            <br />\r\n\r\n            <ColorDisplayer\r\n              label={'Border color'}\r\n              color={\r\n                (selectedElement as IDashboardElementRectangle).border.color\r\n              }\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('rectangle', 'borderColor', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Border radius'\r\n              defaultValue={\r\n                (selectedElement as IDashboardElementRectangle).border.radius\r\n              }\r\n              InputProps={{ inputProps: { min: 0 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange(\r\n                  'rectangle',\r\n                  'borderRadius',\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n          </>\r\n        );\r\n\r\n      case 'circle':\r\n        return (\r\n          <>\r\n            <ColorDisplayer\r\n              label={'Fill color'}\r\n              color={(selectedElement as IDashboardElementCircle).fill}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('circle', 'fill', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Border width'\r\n              defaultValue={\r\n                (selectedElement as IDashboardElementCircle).border.width\r\n              }\r\n              InputProps={{ inputProps: { min: 1 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange(\r\n                  'circle',\r\n                  'borderWidth',\r\n                  event.target.value\r\n                )\r\n              }\r\n            />\r\n\r\n            <br />\r\n            <br />\r\n\r\n            <ColorDisplayer\r\n              label={'Border color'}\r\n              color={(selectedElement as IDashboardElementCircle).border.color}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('circle', 'borderColor', color)\r\n              }\r\n            />\r\n          </>\r\n        );\r\n\r\n      case 'line':\r\n        return (\r\n          <>\r\n            <ColorDisplayer\r\n              label={'Fill color'}\r\n              color={(selectedElement as IDashboardElementLine).fill}\r\n              onColorChange={(color: string) =>\r\n                onEditableFieldsChange('line', 'fill', color)\r\n              }\r\n            />\r\n\r\n            <br />\r\n\r\n            <TextField\r\n              type='number'\r\n              label='Line width'\r\n              defaultValue={\r\n                (selectedElement as IDashboardElementLine).lineWidth\r\n              }\r\n              InputProps={{ inputProps: { min: 0 } }}\r\n              fullWidth\r\n              onInput={(event: ChangeEvent<HTMLInputElement>) =>\r\n                onEditableFieldsChange('line', 'lineWidth', event.target.value)\r\n              }\r\n            />\r\n          </>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return selectedElement ? (\r\n    <div>\r\n      <Typography variant='h5'>Selection mode</Typography>\r\n      <Typography variant='subtitle1'>\r\n        {DEFAULT_ELEMENT_NAME[selectedElement.type || 'rectangle']}\r\n      </Typography>\r\n\r\n      <br />\r\n\r\n      <div className={classes.mainInfo}>\r\n        <p>ID: {selectedElement.id}</p>\r\n        <p>Name: {selectedElement.name}</p>\r\n        <p>Type: {selectedElement.type}</p>\r\n        <p>Height: {selectedElement.height}</p>\r\n        <p>Width: {selectedElement.width}</p>\r\n        <p>x: {selectedElement.x}</p>\r\n        <p>y: {selectedElement.y}</p>\r\n      </div>\r\n\r\n      <br />\r\n      {renderEditableFields()}\r\n    </div>\r\n  ) : null;\r\n});\r\n\r\nexport default SelectionMode;\r\n","import React from 'react';\r\nimport { Drawer, Toolbar } from '@material-ui/core';\r\n\r\nimport useStyles from './ItemDetailsStyles';\r\nimport { useAppSelector } from '../../../store/store-hooks';\r\nimport { selectMode } from '../../../store/dashboard/dashboardSelectors';\r\nimport CreationMode from './CreationMode/CreationMode';\r\nimport SelectionMode from './SelectionMode/SelectionMode';\r\n\r\nconst ItemDetails = () => {\r\n  const classes = useStyles();\r\n  const mode = useAppSelector(selectMode);\r\n\r\n  return (\r\n    <Drawer\r\n      className={classes.drawer}\r\n      variant='permanent'\r\n      anchor='right'\r\n      classes={{\r\n        paper: classes.drawerPaper,\r\n      }}\r\n    >\r\n      <Toolbar />\r\n      <div className={classes.content}>\r\n        <br />\r\n        {mode === 'create' && <CreationMode />}\r\n        {mode === 'select' && <SelectionMode />}\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default ItemDetails;\r\n","import React from 'react';\r\nimport { Toolbar } from '@material-ui/core';\r\n\r\nimport useStyles from './ProjectStyles';\r\n\r\nimport Layers from './Layers/Layers';\r\nimport ProjectToolbar from './ProjectToolbar/ProjectToolbar';\r\nimport Dashboard from './Dashboard/Dashboard';\r\nimport ItemDetails from './ItemDetails/ItemDetails';\r\nimport { useAppSelector } from '../../store/store-hooks';\r\nimport { selectMode, selectSelectedElementId } from '../../store/dashboard/dashboardSelectors';\r\n\r\nconst Project = () => {\r\n  const classes = useStyles();\r\n\r\n  const mode = useAppSelector(selectMode);\r\n  const selectedElement = useAppSelector(selectSelectedElementId);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ProjectToolbar />\r\n      <Layers />\r\n      <main className={classes.content}>\r\n        <Toolbar />\r\n        <Dashboard />\r\n      </main>\r\n      {(mode === 'create' || selectedElement) && <ItemDetails />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n","import React from 'react';\nimport { CssBaseline } from '@material-ui/core';\n\nimport './App.css';\nimport Project from './pages/Project/Project';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Project/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport dashboardReducer from './dashboard/dashboardReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    dashboard: dashboardReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}